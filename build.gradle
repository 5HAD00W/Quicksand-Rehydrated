// Include resources generated by data generators.
buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            name "Parchment"
            url "https://maven.parchmentmc.org"
        }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.32'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'


sourceSets.main.resources { srcDir 'src/generated/resources' }

archivesBaseName = 'qsrehydrated'
version = '0.0.1-1.19'
group = 'net.mokai.qsrehydrated' // http://maven.apache.org/guides/mini/guide-naming-conventions.html


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2022.12.18-1.19.3'
    //mappings channel: 'official', version '1.19.3'

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg 'mixin-config=mixins.qsrehydrated.json'


            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'qsrehydrated'
            property 'forge.enabledGameTestNamespaces', 'all'

            mods {
                qsrehydrated {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //arg '-mixin.config=mixins.qsrehydrated.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'qsrehydrated'

            mods {
                qsrehydrated {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'qsrehydrated'

            mods {
                qsrehydrated {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'qsrehydrated', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                qsrehydrated {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}


mixin {
    add sourceSets.main, "qsrehydrated.refmap.json"
    config "qsrehydrated.mixins.json"
    //dumpTargetOnFailure true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "qsrehydrated",
                "Specification-Vendor"    : "qsrehydratedmokai",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "qsrehydratedmokai",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
        maven { // Vanilla
            name 'Vanilla'
            url 'https://libraries.minecraft.net/'
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name "Parchment"
            url "https://maven.parchmentmc.org"
        }
    }
}



//having to modify the build file every run to get mixins to compile is really stupid, also Zidane, you can go eat a dick.
//asdad